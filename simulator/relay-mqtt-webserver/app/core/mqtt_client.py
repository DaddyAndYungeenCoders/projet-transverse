import paho.mqtt.client as mqtt
import os
import dotenv
import requests

from app.core.config import load_config

dotenv.load_dotenv()
topics = load_config("app/config/topics.yaml", "topics")


def on_message(client, userdata, message):
    print(f"Message received from {message.topic} : {message.payload.decode('utf-8')}")
    data = message.payload.decode('utf-8')

    if message.topic == topics.get("simulator.auto-fire-event"):
        print("Received new fireEvent from Simulator")
        # post new fire_event to webserver, that was auto generated by simulator
        res = requests.post("http://localhost:5000/publish", data)
        print(res.json())
        # pass

    if message.topic == topics.get("simulator-view.sensor-changed"):
        print("Received new sensor value from user")
        # post new values of sensor to webserver, that was given by user from view
        pass

    if message.topic == topics.get("simulator.new-sensor-value"):
        print("Received new sensor value from Simulator")
        # post new values of sensor to webserver, that was given by simulation from simulator
        pass


def on_connect(client, userdata, flags, rc):
    print(f"Connected to {client} with result code {rc}")


def on_publish(client, userdata, mid):
    print(f"Message published (mid={mid})")


class MqttClient:
    _instances = {}

    def __new__(cls, client_name, *args, **kwargs):
        if client_name not in cls._instances:
            cls._instances[client_name] = super(MqttClient, cls).__new__(cls)
            cls._instances[client_name]._init_mqtt_broker(client_name)
        return cls._instances[client_name]

    def _init_mqtt_broker(self, client_name):
        self.broker_ip = os.getenv("BROKER_IP")
        self.broker_port = int(os.getenv("BROKER_PORT"))
        self.user = os.getenv("BROKER_USER")
        self.pw = os.getenv("BROKER_PW")

        self.client = mqtt.Client(client_name)
        self.client.username_pw_set(username=self.user, password=self.pw)
        self.client.on_connect = on_connect
        self.client.on_publish = on_publish
        self.client.on_message = on_message

        self.client.connect(self.broker_ip, self.broker_port)
        self.subscribe_to_topics()
        self.client.loop_start()

    def publish_message(self, topic, message):
        # Publish the message
        result = self.client.publish(topic, message)
        print(f"publishing message to {topic} : {message} (response code: {result})")

    def subscribe_to_topics(self):
        self.client.subscribe(topics.get("simulator.auto-fire-event"))
        self.client.subscribe(topics.get("simulator.new-sensor-value"))
        self.client.subscribe(topics.get("simulator-view.sensor-changed"))
        print("subscribed to topics", topics.get("simulator.auto-fire-event"))
